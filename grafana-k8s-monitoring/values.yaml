alloy:
  alloy:
    clustering:
      enabled: true
    configMap:
      create: false
    extraPorts:
      - name: otlp-grpc
        port: 4317
        protocol: TCP
        targetPort: 4317
      - name: otlp-http
        port: 4318
        protocol: TCP
        targetPort: 4318
      - name: prometheus
        port: 9999
        protocol: TCP
        targetPort: 9999
      - name: jaeger-grpc
        port: 14250
        protocol: TCP
        targetPort: 14250
      - name: jaeger-binary
        port: 6832
        protocol: TCP
        targetPort: 6832
      - name: jaeger-compact
        port: 6831
        protocol: TCP
        targetPort: 6831
      - name: jaeger-http
        port: 14268
        protocol: TCP
        targetPort: 14268
      - name: zipkin
        port: 9411
        protocol: TCP
        targetPort: 9411
    mounts:
      extra:
        - mountPath: /etc/kubernetes-monitoring-telemetry
          name: kubernetes-monitoring-telemetry
  controller:
    nodeSelector:
      kubernetes.io/os: linux
    type: statefulset
    volumes:
      extra:
        - configMap:
            name: kubernetes-monitoring-telemetry
          name: kubernetes-monitoring-telemetry
  crds:
    create: false
alloy-events:
  alloy:
    configMap:
      create: false
  controller:
    nodeSelector:
      kubernetes.io/os: linux
    replicas: 1
    type: deployment
  crds:
    create: false
alloy-logs:
  alloy:
    clustering:
      enabled: false
    configMap:
      create: false
    mounts:
      dockercontainers: false
      varlog: true
  controller:
    nodeSelector:
      kubernetes.io/os: linux
    tolerations:
      - effect: NoSchedule
        operator: Exists
    type: daemonset
  crds:
    create: false
alloy-profiles:
  alloy:
    clustering:
      enabled: false
    configMap:
      create: false
    securityContext:
      privileged: true
      runAsGroup: 0
      runAsUser: 0
    stabilityLevel: public-preview
  controller:
    hostPID: true
    nodeSelector:
      kubernetes.io/os: linux
    tolerations:
      - effect: NoSchedule
        operator: Exists
    type: daemonset
  crds:
    create: false
cluster:
  kubernetesAPIService: kubernetes.default.svc.cluster.local:443
  name: rke2-tmg
  platform: ''
configAnalysis:
  enabled: true
  extraAnnotations: {}
  extraLabels: {}
  image:
    image: grafana/k8s-monitoring-test
    pullSecrets: []
    registry: ghcr.io
    tag: ''
  nodeSelector:
    kubernetes.io/os: linux
  tolerations: []
configValidator:
  enabled: true
  extraAnnotations: {}
  extraLabels: {}
  nodeSelector:
    kubernetes.io/os: linux
  tolerations: []
externalServices:
  loki:
    authMode: basic
    basicAuth:
      password: REPLACE_WITH_ACCESS_POLICY_TOKEN
      passwordKey: password
      username: '642165'
      usernameKey: username
    externalLabels: {}
    host: https://logs.thetmg.com
    hostKey: host
    processors:
      batch:
        maxSize: 0
        size: 8192
        timeout: 2s
      memoryLimiter:
        checkInterval: 1s
        enabled: false
        limit: 0MiB
    protocol: loki
    proxyURL: ''
    queryEndpoint: /loki/api/v1/query
    secret:
      create: true
      name: ''
      namespace: ''
    tenantId: ''
    tenantIdKey: tenantId
    tls: {}
    writeEndpoint: /loki/api/v1/push
  prometheus:
    authMode: basic
    basicAuth:
      password: REPLACE_WITH_ACCESS_POLICY_TOKEN
      passwordKey: password
      username: '1083092'
      usernameKey: username
    externalLabels: {}
    host: https://mimir.thetmg.com
    hostKey: host
    processors:
      batch:
        maxSize: 0
        size: 8192
        timeout: 2s
      memoryLimiter:
        checkInterval: 1s
        enabled: false
        limit: 0MiB
    protocol: remote_write
    proxyURL: ''
    queryEndpoint: /api/v1/query
    secret:
      create: true
      name: ''
      namespace: ''
    sendNativeHistograms: false
    tenantId: ''
    tenantIdKey: tenantId
    tls: {}
    wal:
      maxKeepaliveTime: 8h
      minKeepaliveTime: 5m
      truncateFrequency: 2h
    writeEndpoint: /api/v1/push
    writeRelabelConfigRules: ''
  pyroscope:
    authMode: basic
    basicAuth:
      password: ''
      passwordKey: password
      username: ''
      usernameKey: username
    externalLabels: {}
    host: ''
    hostKey: host
    proxyURL: ''
    secret:
      create: true
      name: ''
      namespace: ''
    tenantId: ''
    tenantIdKey: tenantId
    tls: {}
  tempo:
    authMode: basic
    basicAuth:
      password: ''
      passwordKey: password
      username: ''
      usernameKey: username
    host: ''
    hostKey: host
    protocol: otlp
    searchEndpoint: /api/search
    secret:
      create: true
      name: ''
      namespace: ''
    tenantId: ''
    tenantIdKey: tenantId
    tls: {}
    tlsOptions: ''
extraConfig: ''
extraObjects: []
global:
  image:
    pullSecrets: []
    registry: ''
  cattle:
    systemProjectId: p-dkrnd
kube-state-metrics:
  autosharding:
    enabled: false
  enabled: true
  nodeSelector:
    kubernetes.io/os: linux
  prometheusScrape: false
  updateStrategy: Recreate
logs:
  cluster_events:
    enabled: true
    logFormat: logfmt
    namespaces: []
  enabled: true
  extraConfig: ''
  podLogsObjects:
    enabled: false
    extraStageBlocks: ''
    namespaces: []
    selector: ''
  pod_logs:
    annotation: k8s.grafana.com/logs.autogather
    discovery: all
    enabled: true
    extraRelabelingRules: ''
    extraStageBlocks: ''
    gatherMethod: volumes
    namespaces: []
  receiver:
    filters:
      log_record: []
    transforms:
      log: []
      resource: []
metrics:
  alloy:
    enabled: true
    extraMetricRelabelingRules: ''
    extraRelabelingRules: ''
    labelMatchers:
      app.kubernetes.io/name: alloy.*
    metricsTuning:
      excludeMetrics: []
      includeMetrics: []
      useDefaultAllowList: true
      useIntegrationAllowList: false
    scrapeInterval: ''
  apiserver:
    enabled: false
    extraMetricRelabelingRules: ''
    extraRelabelingRules: ''
    metricsTuning:
      excludeMetrics: []
      includeMetrics: []
    scrapeInterval: ''
  autoDiscover:
    annotations:
      instance: k8s.grafana.com/instance
      job: k8s.grafana.com/job
      metricsPath: k8s.grafana.com/metrics.path
      metricsPortName: k8s.grafana.com/metrics.portName
      metricsPortNumber: k8s.grafana.com/metrics.portNumber
      metricsScheme: k8s.grafana.com/metrics.scheme
      scrape: k8s.grafana.com/scrape
    enabled: true
    extraMetricRelabelingRules: ''
    extraRelabelingRules: ''
    metricsTuning:
      excludeMetrics: []
      includeMetrics: []
  cadvisor:
    enabled: true
    extraMetricRelabelingRules: ''
    extraRelabelingRules: ''
    metricsTuning:
      dropEmptyContainerLabels: true
      dropEmptyImageLabels: true
      excludeMetrics: []
      includeMetrics: []
      keepPhysicalFilesystemDevices:
        - mmcblk.p.+
        - nvme.+
        - rbd.+
        - sd.+
        - vd.+
        - xvd.+
        - dasd.+
      keepPhysicalNetworkDevices:
        - en[ospx][0-9].*
        - wlan[0-9].*
        - eth[0-9].*
      normalizeUnnecessaryLabels:
        - labels:
            - boot_id
            - system_uuid
          metric: machine_memory_bytes
      useDefaultAllowList: true
    nodeAddressFormat: direct
    scrapeInterval: ''
  cost:
    enabled: true
    extraMetricRelabelingRules: ''
    extraRelabelingRules: ''
    labelMatchers:
      app.kubernetes.io/name: opencost
    metricsTuning:
      excludeMetrics: []
      includeMetrics: []
      useDefaultAllowList: true
    scrapeInterval: ''
  enabled: true
  extraMetricRelabelingRules: ''
  extraRelabelingRules: ''
  kube-state-metrics:
    enabled: true
    extraMetricRelabelingRules: ''
    extraRelabelingRules: ''
    labelMatchers:
      app.kubernetes.io/name: kube-state-metrics
    metricsTuning:
      excludeMetrics: []
      includeMetrics: []
      useDefaultAllowList: true
    scrapeInterval: ''
    service:
      isTLS: false
      port: http
  kubeControllerManager:
    enabled: false
    extraMetricRelabelingRules: ''
    extraRelabelingRules: ''
    metricsTuning:
      excludeMetrics: []
      includeMetrics: []
    port: 10257
    scrapeInterval: ''
  kubeProxy:
    enabled: false
    extraMetricRelabelingRules: ''
    extraRelabelingRules: ''
    metricsTuning:
      excludeMetrics: []
      includeMetrics: []
    port: 10249
    scrapeInterval: ''
  kubeScheduler:
    enabled: false
    extraMetricRelabelingRules: ''
    extraRelabelingRules: ''
    metricsTuning:
      excludeMetrics: []
      includeMetrics: []
    port: 10259
    scrapeInterval: ''
  kubelet:
    enabled: true
    extraMetricRelabelingRules: ''
    extraRelabelingRules: ''
    metricsTuning:
      excludeMetrics: []
      includeMetrics: []
      useDefaultAllowList: true
    nodeAddressFormat: direct
    scrapeInterval: ''
  kubernetesMonitoring:
    enabled: true
  node-exporter:
    enabled: true
    extraMetricRelabelingRules: ''
    extraRelabelingRules: ''
    labelMatchers:
      app.kubernetes.io/name: prometheus-node-exporter.*
    metricsTuning:
      dropMetricsForFilesystem:
        - tempfs
      excludeMetrics: []
      includeMetrics: []
      useDefaultAllowList: true
      useIntegrationAllowList: false
    scrapeInterval: ''
    service:
      isTLS: false
  podMonitors:
    enabled: true
    extraMetricRelabelingRules: ''
    namespaces: []
    scrapeInterval: ''
    selector: ''
  probes:
    enabled: true
    extraMetricRelabelingRules: ''
    namespaces: []
    scrapeInterval: ''
    selector: ''
  receiver:
    filters:
      datapoint: []
      metric: []
    transforms:
      datapoint: []
      metric: []
      resource: []
  scrapeInterval: 60s
  serviceMonitors:
    enabled: true
    extraMetricRelabelingRules: ''
    namespaces: []
    scrapeInterval: ''
    selector: ''
  windows-exporter:
    enabled: false
    extraMetricRelabelingRules: ''
    extraRelabelingRules: ''
    labelMatchers:
      app.kubernetes.io/name: prometheus-windows-exporter.*
    metricsTuning:
      excludeMetrics: []
      includeMetrics: []
      useDefaultAllowList: true
    scrapeInterval: ''
opencost:
  enabled: true
  opencost:
    exporter:
      defaultClusterId: rke2-tmg
      extraEnv:
        CLOUD_PROVIDER_API_KEY: AIzaSyD29bGxmHAVEOBYtgd8sYM2gM2ekfxQX4U
        CURRENT_CLUSTER_ID_FILTER_ENABLED: 'true'
        EMIT_KSM_V1_METRICS: 'false'
        EMIT_KSM_V1_METRICS_ONLY: 'true'
        PROM_CLUSTER_ID_LABEL: cluster
    nodeSelector:
      kubernetes.io/os: linux
    prometheus:
      external:
        enabled: true
        url: https://mimir.thetmg.com
      internal:
        enabled: false
      password_key: password
      secret_name: prometheus-k8s-monitoring
      username_key: username
    ui:
      enabled: false
profiles:
  ebpf:
    demangle: none
    enabled: true
    extraRelabelingRules: ''
    namespaces: []
  enabled: false
  pprof:
    enabled: true
    extraRelabelingRules: ''
    namespaces: []
    types:
      - memory
      - cpu
      - goroutine
      - block
      - mutex
      - fgprof
prometheus-node-exporter:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: eks.amazonaws.com/compute-type
                operator: NotIn
                values:
                  - fargate
  enabled: true
  nodeSelector:
    kubernetes.io/os: linux
  service:
    annotations:
      prometheus.io/scrape: null
prometheus-operator-crds:
  enabled: true
prometheus-windows-exporter:
  config: |-
    collectors:
      enabled: cpu,cs,container,logical_disk,memory,net,os
    collector:
      service:
        services-where: "Name='containerd' or Name='kubelet'"
  enabled: false
receivers:
  grpc:
    disable_debug_metrics: true
    enabled: true
    port: 4317
  http:
    disable_debug_metrics: true
    enabled: true
    port: 4318
  jaeger:
    disable_debug_metrics: true
    grpc:
      enabled: false
      port: 14250
    thriftBinary:
      enabled: false
      port: 6832
    thriftCompact:
      enabled: false
      port: 6831
    thriftHttp:
      enabled: false
      port: 14268
  processors:
    batch:
      maxSize: 0
      size: 16384
      timeout: 2s
  prometheus:
    enabled: false
    port: 9999
  zipkin:
    disable_debug_metrics: true
    enabled: false
    port: 9411
test:
  attempts: 10
  enabled: true
  envOverrides:
    LOKI_URL: ''
    PROFILECLI_URL: ''
    PROMETHEUS_URL: ''
    TEMPO_URL: ''
  extraAnnotations: {}
  extraLabels: {}
  extraQueries: []
  image:
    image: grafana/k8s-monitoring-test
    pullSecrets: []
    registry: ghcr.io
    tag: ''
  nodeSelector:
    kubernetes.io/os: linux
  tolerations: []
traces:
  enabled: false
  receiver:
    filters:
      span: []
      spanevent: []
    transforms:
      resource: []
      span: []
      spanevent: []
